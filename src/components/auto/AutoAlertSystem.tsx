import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { 
  Bell, 
  TrendingUp, 
  AlertTriangle, 
  CheckCircle2, 
  Clock,
  Target,
  Users,
  MapPin,
  Zap
} from "lucide-react";
import { useRealtimeUpdates } from '@/hooks/useRealtimeUpdates';

interface AutoAlert {
  id: string;
  type: 'success' | 'warning' | 'error' | 'info';
  title: string;
  message: string;
  timestamp: Date;
  priority: 1 | 2 | 3; // 1 = high, 2 = medium, 3 = low
  autoGenerated: boolean;
  actionRequired: boolean;
  region?: string;
  researcher?: string;
}

export const AutoAlertSystem = () => {
  const [alerts, setAlerts] = useState<AutoAlert[]>([]);
  const [activeAlerts, setActiveAlerts] = useState(0);
  const [isMonitoring, setIsMonitoring] = useState(true);
  const { data: realtimeData, isConnected } = useRealtimeUpdates('demo-research');

  // Auto-generate alerts based on various conditions
  useEffect(() => {
    const checkConditions = () => {
      const newAlerts: AutoAlert[] = [];

      // Check quota progress alerts
      const lowProgressRegions = [
        { name: 'Zona Leste', progress: 35 },
        { name: 'Zona Oeste', progress: 25 }
      ];

      lowProgressRegions.forEach(region => {
        if (region.progress < 40) {
          newAlerts.push({
            id: `quota-${region.name}-${Date.now()}`,
            type: 'warning',
            title: 'Meta em Risco',
            message: `${region.name} está com apenas ${region.progress}% da meta concluída`,
            timestamp: new Date(),
            priority: 2,
            autoGenerated: true,
            actionRequired: true,
            region: region.name
          });
        }
      });

      // Check researcher inactivity
      if (Math.random() > 0.8) { // 20% chance to trigger
        newAlerts.push({
          id: `inactivity-${Date.now()}`,
          type: 'error',
          title: 'Pesquisador Inativo',
          message: 'Ana Costa não registra atividade há mais de 2 horas',
          timestamp: new Date(),
          priority: 1,
          autoGenerated: true,
          actionRequired: true,
          researcher: 'Ana Costa'
        });
      }

      // Check completion milestones
      if (realtimeData.interviews > 0 && realtimeData.interviews % 50 === 0) {
        newAlerts.push({
          id: `milestone-${Date.now()}`,
          type: 'success',
          title: 'Marco Atingido!',
          message: `${realtimeData.interviews} entrevistas concluídas com sucesso`,
          timestamp: new Date(),
          priority: 3,
          autoGenerated: true,
          actionRequired: false
        });
      }

      // Check efficiency patterns
      if (Math.random() > 0.9) { // 10% chance
        newAlerts.push({
          id: `efficiency-${Date.now()}`,
          type: 'info',
          title: 'Padrão Detectado',
          message: 'Sistema detectou maior eficiência nas entrevistas matutinas',
          timestamp: new Date(),
          priority: 3,
          autoGenerated: true,
          actionRequired: false
        });
      }

      // Check weather/external factors (simulated)
      if (Math.random() > 0.95) { // 5% chance
        newAlerts.push({
          id: `weather-${Date.now()}`,
          type: 'warning',
          title: 'Fator Externo',
          message: 'Chuva prevista pode impactar coleta nas próximas 2 horas',
          timestamp: new Date(),
          priority: 2,
          autoGenerated: true,
          actionRequired: true
        });
      }

      if (newAlerts.length > 0) {
        setAlerts(prev => [...newAlerts, ...prev].slice(0, 50)); // Keep only last 50
        setActiveAlerts(prev => prev + newAlerts.filter(a => a.actionRequired).length);
      }
    };

    if (isMonitoring) {
      const interval = setInterval(checkConditions, 8000); // Check every 8 seconds
      return () => clearInterval(interval);
    }
  }, [isMonitoring, realtimeData]);

  // Auto-clear old alerts
  useEffect(() => {
    const clearOldAlerts = () => {
      const now = new Date();
      setAlerts(prev => prev.filter(alert => {
        const age = now.getTime() - alert.timestamp.getTime();
        const maxAge = alert.priority === 1 ? 30 * 60 * 1000 : // 30 min for high priority
                     alert.priority === 2 ? 15 * 60 * 1000 : // 15 min for medium priority
                     5 * 60 * 1000; // 5 min for low priority
        return age < maxAge;
      }));
    };

    const interval = setInterval(clearOldAlerts, 60000); // Check every minute
    return () => clearInterval(interval);
  }, []);

  const getAlertIcon = (type: string) => {
    switch (type) {
      case 'success': return CheckCircle2;
      case 'warning': return AlertTriangle;
      case 'error': return AlertTriangle;
      case 'info': return TrendingUp;
      default: return Bell;
    }
  };

  const getAlertColor = (type: string) => {
    switch (type) {
      case 'success': return 'text-success';
      case 'warning': return 'text-warning';
      case 'error': return 'text-danger';
      case 'info': return 'text-info';
      default: return 'text-muted-foreground';
    }
  };

  const getPriorityBadge = (priority: number) => {
    switch (priority) {
      case 1: return { variant: 'destructive' as const, label: 'Alta' };
      case 2: return { variant: 'outline' as const, label: 'Média' };
      case 3: return { variant: 'secondary' as const, label: 'Baixa' };
      default: return { variant: 'secondary' as const, label: 'Normal' };
    }
  };

  const dismissAlert = (alertId: string) => {
    setAlerts(prev => prev.filter(alert => alert.id !== alertId));
    setActiveAlerts(prev => Math.max(0, prev - 1));
  };

  const highPriorityAlerts = alerts.filter(a => a.priority === 1 && a.actionRequired);
  const recentAlerts = alerts.slice(0, 10);

  return (
    <div className="space-y-6">
      {/* Alert Summary */}
      <Card className="animate-fade-in">
        <CardHeader>
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <div className="relative">
                <Bell className="h-6 w-6 text-primary" />
                {activeAlerts > 0 && (
                  <div className="absolute -top-1 -right-1 w-3 h-3 bg-danger rounded-full animate-pulse">
                    <span className="absolute inset-0 flex items-center justify-center text-xs text-white font-bold">
                      {activeAlerts > 9 ? '9+' : activeAlerts}
                    </span>
                  </div>
                )}
              </div>
              <div>
                <CardTitle>Sistema de Alertas Automático</CardTitle>
                <CardDescription>
                  Monitoramento inteligente em tempo real
                </CardDescription>
              </div>
            </div>
            <div className="flex items-center space-x-2">
              <Badge variant={isConnected ? 'default' : 'outline'}>
                <Zap className={`h-3 w-3 ${isConnected ? 'animate-pulse' : ''}`} />
                {isConnected ? 'Conectado' : 'Desconectado'}
              </Badge>
              <Badge variant={isMonitoring ? 'default' : 'secondary'}>
                {isMonitoring ? 'Monitorando' : 'Pausado'}
              </Badge>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="text-center">
              <div className="text-2xl font-bold text-danger">{highPriorityAlerts.length}</div>
              <p className="text-sm text-muted-foreground">Alertas Críticos</p>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-warning">{alerts.filter(a => a.priority === 2).length}</div>
              <p className="text-sm text-muted-foreground">Alertas Médios</p>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-info">{alerts.filter(a => a.type === 'success').length}</div>
              <p className="text-sm text-muted-foreground">Sucessos</p>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-primary">{alerts.filter(a => a.autoGenerated).length}</div>
              <p className="text-sm text-muted-foreground">Auto-Gerados</p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* High Priority Alerts */}
      {highPriorityAlerts.length > 0 && (
        <Card className="border-danger/50 bg-danger/5 animate-fade-in">
          <CardHeader>
            <CardTitle className="text-danger flex items-center space-x-2">
              <AlertTriangle className="h-5 w-5 animate-pulse" />
              <span>Alertas Críticos - Ação Necessária</span>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-3">
            {highPriorityAlerts.map((alert) => {
              const Icon = getAlertIcon(alert.type);
              return (
                <Alert key={alert.id} className="border-danger/30">
                  <Icon className="h-4 w-4" />
                  <AlertDescription>
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="font-medium">{alert.title}</p>
                        <p className="text-sm">{alert.message}</p>
                        <p className="text-xs text-muted-foreground mt-1">
                          {alert.timestamp.toLocaleTimeString('pt-BR')}
                        </p>
                      </div>
                      <button
                        onClick={() => dismissAlert(alert.id)}
                        className="text-xs text-muted-foreground hover:text-foreground"
                      >
                        Dispensar
                      </button>
                    </div>
                  </AlertDescription>
                </Alert>
              );
            })}
          </CardContent>
        </Card>
      )}

      {/* Recent Alerts */}
      <Card className="animate-fade-in">
        <CardHeader>
          <CardTitle>Alertas Recentes</CardTitle>
          <CardDescription>
            Últimas notificações do sistema de monitoramento
          </CardDescription>
        </CardHeader>
        <CardContent>
          {recentAlerts.length === 0 ? (
            <div className="text-center py-8">
              <Bell className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
              <p className="text-muted-foreground">Nenhum alerta recente</p>
            </div>
          ) : (
            <div className="space-y-3">
              {recentAlerts.map((alert) => {
                const Icon = getAlertIcon(alert.type);
                const priorityBadge = getPriorityBadge(alert.priority);
                
                return (
                  <div 
                    key={alert.id} 
                    className="flex items-start space-x-3 p-3 rounded-lg hover:bg-muted/50 transition-colors animate-fade-in"
                  >
                    <Icon className={`h-5 w-5 mt-0.5 ${getAlertColor(alert.type)}`} />
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center justify-between">
                        <h4 className="font-medium truncate">{alert.title}</h4>
                        <div className="flex items-center space-x-2 ml-2">
                          <Badge variant={priorityBadge.variant}>
                            {priorityBadge.label}
                          </Badge>
                          {alert.autoGenerated && (
                            <Badge variant="outline">
                              <Zap className="h-3 w-3" />
                              Auto
                            </Badge>
                          )}
                        </div>
                      </div>
                      <p className="text-sm text-muted-foreground mt-1">{alert.message}</p>
                      <div className="flex items-center justify-between mt-2">
                        <span className="text-xs text-muted-foreground">
                          {alert.timestamp.toLocaleString('pt-BR')}
                        </span>
                        {alert.actionRequired && (
                          <button
                            onClick={() => dismissAlert(alert.id)}
                            className="text-xs text-primary hover:underline"
                          >
                            Marcar como Resolvido
                          </button>
                        )}
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          )}
        </CardContent>
      </Card>

      {/* System Status */}
      <Card className="animate-fade-in">
        <CardHeader>
          <CardTitle>Status do Sistema de Monitoramento</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
            <div className="space-y-2">
              <Target className="h-8 w-8 text-success mx-auto" />
              <p className="text-sm font-medium">Quotas</p>
              <p className="text-xs text-muted-foreground">Monitoramento ativo</p>
            </div>
            <div className="space-y-2">
              <Users className="h-8 w-8 text-info mx-auto" />
              <p className="text-sm font-medium">Pesquisadores</p>
              <p className="text-xs text-muted-foreground">Rastreamento GPS</p>
            </div>
            <div className="space-y-2">
              <MapPin className="h-8 w-8 text-warning mx-auto" />
              <p className="text-sm font-medium">Regiões</p>
              <p className="text-xs text-muted-foreground">Análise em tempo real</p>
            </div>
            <div className="space-y-2">
              <Clock className="h-8 w-8 text-primary mx-auto" />
              <p className="text-sm font-medium">Performance</p>
              <p className="text-xs text-muted-foreground">IA preditiva</p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};